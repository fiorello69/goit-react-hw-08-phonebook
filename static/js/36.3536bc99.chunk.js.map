{"version":3,"file":"static/js/36.3536bc99.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/common/AddContactBtn/AddContactBtn.module.css?10e4","components/common/AddContactBtn/AddContactBtn.jsx","../node_modules/nanoid/url-alphabet/index.js","components/common/InputField/InputField.jsx","../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","hooks/useContacts.js","components/Phonebook/Phonebook.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/FilterContactsInput/FilterContactsInput.jsx","webpack://react-homework-template/./src/components/ContactList/ContactsList.module.css?c071","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/AbsentContactsNotification/AbsentContactsNotification.module.css?9151","components/AbsentContactsNotification/AbsentContactsNotification.jsx","components/ContactList/ContactsList.jsx","webpack://react-homework-template/./src/components/common/Loader/Loader.module.css?8b04","components/common/Loader/Loader.jsx","webpack://react-homework-template/./src/components/common/ErrorAlert/ErrorAlert.module.css?5ee0","components/common/ErrorAlert/ErrorAlert.jsx","components/Contacts/Contacts.jsx","pages/ContactsPage/ContactsPage.jsx","pages/ContactsPage/RestrictedContacsPage/RestrictedContactsPage.jsx","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"submitBtn\":\"AddContactBtn_submitBtn__m1C+L\"};","import PropTypes from 'prop-types';\nimport styles from './AddContactBtn.module.css';\n\nconst AddContactBtn = ({ text }) => {\n  return (\n    <button className={styles.submitBtn} type=\"submit\">\n      {text}\n    </button>\n  );\n};\n\nAddContactBtn.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default AddContactBtn;\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nconst InputField = ({ type, name, pattern, title }) => {\n  const inputId = nanoid();\n\n  return (\n    <>\n      <label htmlFor={inputId}>{name}</label>\n      <input\n        type={type}\n        name={name}\n        id={inputId}\n        pattern={pattern || null}\n        title={title || null}\n        autoComplete=\"on\"\n        required\n      />\n    </>\n  );\n};\n\nInputField.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default InputField;\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectIsLoading = state => state.contacts.isLoading;\nconst selectError = state => state.contacts.error;\nconst selectFilter = state => state.contacts.filter;\nconst selectContacts = state => state.contacts.items;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(item =>\n      item.name.toUpperCase().includes(filter.toUpperCase())\n    );\n  }\n);\n\nexport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n  selectFilter,\n  selectFilteredContacts,\n};\n","import { useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n  selectFilter,\n  selectFilteredContacts,\n} from '../redux/contacts/selectors';\n\nconst useContacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return { isLoading, error, contacts, filter, filteredContacts };\n};\n\nexport default useContacts;\n","import styles from './Phonebook.module.css';\n\nimport InputField from '../../components/common/InputField/InputField';\nimport AddContactBtn from '../../components/common/AddContactBtn/AddContactBtn';\n\nimport { useDispatch } from 'react-redux';\nimport useContacts from '../../hooks/useContacts';\nimport { addContact } from '../../redux/contacts/operations';\nimport { setFilter } from '../../redux/contacts/slice';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n\n  const { contacts } = useContacts();\n\n  const checkExistence = name => {\n    return contacts.find(\n      item => item.name.toUpperCase() === name.toUpperCase()\n    );\n  };\n\n  const formatNumber = number => {\n    const formatedNumber = number.padEnd(10, '9').split('');\n\n    formatedNumber.length > 10 &&\n      formatedNumber.splice(10, formatedNumber.length);\n\n    formatedNumber.splice(3, 0, '-');\n    formatedNumber.splice(7, 0, '-');\n\n    return formatedNumber.join('');\n  };\n\n  const capitalize = text => {\n    return text\n      .split(' ')\n      .map(\n        word =>\n          word.charAt(0).toUpperCase() +\n          word.slice(1, word.length).toLowerCase()\n      )\n      .join(' ');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.target;\n    const name = capitalize(form.elements.name.value.trim());\n    const number = formatNumber(form.elements.number.value.trim());\n\n    checkExistence(name)\n      ? alert(`\"${name}\" is already in contacts`)\n      : dispatch(addContact({ name, number })) && dispatch(setFilter(''));\n\n    form.reset();\n  };\n\n  return (\n    <div className={styles.phonebook}>\n      <h2>Phonebook</h2>\n\n      <form onSubmit={handleSubmit}>\n        <InputField\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z ])?[a-zA-Z]*)*\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        />\n        <InputField\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        />\n\n        <AddContactBtn text=\"Add contact\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Phonebook;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactsPage_contacts__m3nnh\"};","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__Eg+6p\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/slice';\n\nimport useContacts from '../../hooks/useContacts';\n\nconst FilterContactsInput = () => {\n  const dispatch = useDispatch();\n\n  const { filter } = useContacts();\n\n  const handleInputChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"filterInputId\">Find contacts by name</label>\n      <input\n        onChange={handleInputChange}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        id=\"filterInputId\"\n        autoComplete=\"off\"\n        pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z ])?[a-zA-Z]*)*\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </>\n  );\n};\n\nexport default FilterContactsInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__7sAfD\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    const userConfirmation = window.confirm(\n      `Delete \"${contact.name}\" from yout list ?`\n    );\n\n    userConfirmation && dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <li>\n      <span>{contact.name}</span>: <span>{contact.number}</span>\n      <button onClick={handleClick} type=\"button\">\n        X\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n\nexport default ContactItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"notification\":\"AbsentContactsNotification_notification__sX203\"};","import { selectFilter } from '../../redux/contacts/selectors';\nimport styles from './AbsentContactsNotification.module.css';\nimport { useSelector } from 'react-redux';\n\nconst AbsentContactsNotification = () => {\n  const searchedContact = useSelector(selectFilter);\n\n  return (\n    <>\n      <p className={styles.notification}>\n        {searchedContact === ''\n          ? \"You haven't saved any contacts yet\"\n          : ` \" ${searchedContact} \" is not saved in your contacts list`}\n      </p>\n    </>\n  );\n};\n\nexport default AbsentContactsNotification;\n","import styles from './ContactsList.module.css';\nimport ContactItem from '../../components/ContactItem/ContactItem';\nimport AbsentContactsNotification from '../../components/AbsentContactsNotification/AbsentContactsNotification';\n\nimport useContacts from '../../hooks/useContacts';\n\nconst ContactsList = () => {\n  const { filteredContacts } = useContacts();\n\n  if (filteredContacts.length === 0) {\n    return <AbsentContactsNotification />;\n  }\n\n  return (\n    <ul className={styles.contactsList}>\n      {filteredContacts.map(item => (\n        <ContactItem key={item.id} contact={item} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__WEzse\"};","import { ThreeDots } from 'react-loader-spinner';\nimport styles from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <ThreeDots\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      radius=\"9\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperClass={styles.loader}\n    />\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"Error\":\"ErrorAlert_Error__rwsaJ\"};","import PropTypes from 'prop-types';\nimport styles from './ErrorAlert.module.css';\n\nconst ErrorAlert = ({ error }) => {\n  return <p className={styles.Error}>{error}</p>;\n};\n\nErrorAlert.propTypes = {\n  error: PropTypes.string.isRequired,\n};\n\nexport default ErrorAlert;\n","import styles from './Contacts.module.css';\nimport FilterContactsInput from '../../components/FilterContactsInput/FilterContactsInput';\nimport ContactsList from '../../components/ContactList/ContactsList';\nimport Loader from '../../components/common/Loader/Loader';\n\nimport useContacts from '../../hooks/useContacts';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport ErrorAlert from '../../components/common/ErrorAlert/ErrorAlert';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const { isLoading, error } = useContacts();\n  const Error_Message = `The contact list cannot be loaded due to the following error: ${error} `;\n\n  return (\n    <div className={styles.contacts}>\n      <h2>Contacts</h2>\n      <FilterContactsInput />\n\n      {isLoading && <Loader />}\n      {error && <ErrorAlert error={Error_Message} />}\n      {!isLoading && !error && <ContactsList />}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import Phonebook from 'components/Phonebook/Phonebook';\nimport styles from './ContactsPage.module.css';\nimport Contacts from 'components/Contacts/Contacts';\n\nconst ContactsPage = () => {\n  return (\n    <section className={styles.contacts}>\n      <Phonebook />\n      <Contacts />\n    </section>\n  );\n};\n\nexport default ContactsPage;\n","import { Navigate } from 'react-router-dom';\nimport useAuth from '../../../hooks/useAuth';\nimport ContactsPage from '../ContactsPage';\n\nconst RestrictedContactsPage = () => {\n  const { isLoggedIn } = useAuth();\n\n  if (!isLoggedIn) {\n    return <Navigate to={'/login'} />;\n  }\n\n  return <ContactsPage />;\n};\n\nexport default RestrictedContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"Phonebook_phonebook__A8MMG\",\"authSection\":\"Phonebook_authSection__5PUBC\"};"],"names":["_ref","text","_jsx","className","styles","type","children","urlAlphabet","name","pattern","title","inputId","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","nanoid","_jsxs","_Fragment","htmlFor","autoComplete","required","selectIsLoading","state","contacts","isLoading","selectError","error","selectFilter","filter","selectContacts","items","selectFilteredContacts","createSelector","item","toUpperCase","includes","useContacts","useSelector","filteredContacts","Phonebook","dispatch","useDispatch","onSubmit","event","preventDefault","form","target","elements","value","trim","split","map","word","charAt","slice","toLowerCase","join","number","formatedNumber","padEnd","splice","formatNumber","find","checkExistence","alert","concat","addContact","setFilter","reset","InputField","AddContactBtn","FilterContactsInput","onChange","contact","onClick","handleClick","window","confirm","deleteContact","AbsentContactsNotification","searchedContact","ContactsList","ContactItem","Loader","ThreeDots","visible","height","width","color","radius","ariaLabel","wrapperClass","Contacts","useEffect","fetchContacts","Error_Message","ErrorAlert","ContactsPage","RestrictedContactsPage","isLoggedIn","useAuth","Navigate","to"],"sourceRoot":""}