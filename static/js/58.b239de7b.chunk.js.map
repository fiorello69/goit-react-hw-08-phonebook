{"version":3,"file":"static/js/58.b239de7b.chunk.js","mappings":"gJACA,QAA4B,iC,aCE5B,MAYA,EAZsBA,IAAe,IAAd,KAAEC,GAAMD,EAC7B,OACEE,EAAAA,EAAAA,KAAA,UAAQC,UAAWC,EAAkBC,KAAK,SAAQC,SAC/CL,GACM,C,iCCPN,MAAMM,EACX,mE,aCEF,MAwBA,EAxBmBP,IAAqC,IAApC,KAAEK,EAAI,KAAEG,EAAI,QAAEC,EAAO,MAAEC,GAAOV,EAChD,MAAMW,ECgBY,WAAe,IAAdC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACtBG,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWR,IAClD,KAAOA,KACLI,GAAMT,EAA0B,GAAdU,EAAML,IAE1B,OAAOI,CACT,CDvBkBK,GAEhB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAjB,SAAA,EACEJ,EAAAA,EAAAA,KAAA,SAAOsB,QAASb,EAAQL,SAAEE,KAC1BN,EAAAA,EAAAA,KAAA,SACEG,KAAMA,EACNG,KAAMA,EACNQ,GAAIL,EACJF,QAASA,GAAW,KACpBC,MAAOA,GAAS,KAChBe,aAAa,KACbC,UAAQ,MAET,C,0IEPP,MA+CA,EA/CqBC,KACnB,MAAMC,GAAWC,EAAAA,EAAAA,OAEX,UAAEC,IAAcC,EAAAA,EAAAA,KAsBtB,OAAID,GACK5B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAc,CAAA1B,SAAC,iBAIvBJ,EAAAA,EAAAA,KAAA,WAASC,UAAWC,EAAAA,EAAAA,YAAmBE,UACrCgB,EAAAA,EAAAA,MAAA,OAAKnB,UAAWC,EAAAA,EAAAA,UAAiBE,SAAA,EAC/BJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,cAEJgB,EAAAA,EAAAA,MAAA,QAAMW,SA7BSC,IACnBA,EAAMC,iBAEN,MAAMC,EAAOF,EAAMG,OACb7B,EAAO4B,EAAKE,SAAS9B,KAAK+B,MAAMC,OAChCC,EAAQL,EAAKE,SAASG,MAAMF,MAAMC,OAElCE,EAAWN,EAAKE,SAASI,SAASH,MAGpCG,IAFoBN,EAAKE,SAASK,gBAAgBJ,OAOtDX,GAASgB,EAAAA,EAAAA,IAAS,CAAEpC,OAAMiC,QAAOC,cAEjCN,EAAKS,SANHC,EAAAA,GAAAA,MAAY,4BAMF,EAYqBxC,SAAA,EAC3BJ,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAAC1C,KAAK,OAAOG,KAAK,UAC7BN,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAAC1C,KAAK,QAAQG,KAAK,WAC9BN,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAAC1C,KAAK,WAAWG,KAAK,cACjCN,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAAC1C,KAAK,WAAWG,KAAK,qBAEjCN,EAAAA,EAAAA,KAAC8C,EAAAA,EAAa,CAAC/C,KAAK,oBAGhB,ECxCd,EAV+BgD,KAC7B,MAAM,WAAEC,IAAenB,EAAAA,EAAAA,KAEvB,OAAImB,GACKhD,EAAAA,EAAAA,KAACiD,EAAAA,GAAQ,CAACC,GAAG,eAGflD,EAAAA,EAAAA,KAACyB,EAAY,GAAG,C,iCCVzB,SAAgB,UAAY,6BAA6B,YAAc,+B","sources":["webpack://react-homework-template/./src/components/common/AddContactBtn/AddContactBtn.module.css?10e4","components/common/AddContactBtn/AddContactBtn.jsx","../node_modules/nanoid/url-alphabet/index.js","components/common/InputField/InputField.jsx","../node_modules/nanoid/index.browser.js","pages/RegisterPage/RegisterPage.jsx","pages/RegisterPage/RestrictedRegisterPage/RestrictedRegisterPage.jsx","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"submitBtn\":\"AddContactBtn_submitBtn__m1C+L\"};","import PropTypes from 'prop-types';\nimport styles from './AddContactBtn.module.css';\n\nconst AddContactBtn = ({ text }) => {\n  return (\n    <button className={styles.submitBtn} type=\"submit\">\n      {text}\n    </button>\n  );\n};\n\nAddContactBtn.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default AddContactBtn;\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nconst InputField = ({ type, name, pattern, title }) => {\n  const inputId = nanoid();\n\n  return (\n    <>\n      <label htmlFor={inputId}>{name}</label>\n      <input\n        type={type}\n        name={name}\n        id={inputId}\n        pattern={pattern || null}\n        title={title || null}\n        autoComplete=\"on\"\n        required\n      />\n    </>\n  );\n};\n\nInputField.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default InputField;\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import AddContactBtn from '../../components/common/AddContactBtn/AddContactBtn';\nimport styles from '../../components/Phonebook/Phonebook.module.css';\nimport InputField from '../../components/common/InputField/InputField';\nimport FallbackLoader from '../../components/common/FallbackLoader/FallbackLoader';\n\nimport useAuth from 'hooks/useAuth';\nimport { useDispatch } from 'react-redux';\n\nimport { toast } from 'react-toastify';\nimport { register } from '../../redux/auth/operations';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const { isLoading } = useAuth();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.target;\n    const name = form.elements.name.value.trim();\n    const email = form.elements.email.value.trim();\n\n    const password = form.elements.password.value;\n    const confirmPassword = form.elements.confirmPassword.value;\n\n    if (password !== confirmPassword) {\n      toast.error(`Passwords doesn't match !`);\n      return;\n    }\n\n    dispatch(register({ name, email, password }));\n\n    form.reset();\n  };\n\n  if (isLoading) {\n    return <FallbackLoader>Register...</FallbackLoader>;\n  }\n\n  return (\n    <section className={styles.authSection}>\n      <div className={styles.phonebook}>\n        <h2>Register</h2>\n\n        <form onSubmit={handleSubmit}>\n          <InputField type=\"text\" name=\"name\" />\n          <InputField type=\"email\" name=\"email\" />\n          <InputField type=\"password\" name=\"password\" />\n          <InputField type=\"password\" name=\"confirmPassword\" />\n\n          <AddContactBtn text=\"Register\" />\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default RegisterPage;\n","import { Navigate } from 'react-router-dom';\nimport useAuth from '../../../hooks/useAuth';\nimport RegisterPage from '../RegisterPage';\n\nconst RestrictedRegisterPage = () => {\n  const { isLoggedIn } = useAuth();\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return <RegisterPage />;\n};\n\nexport default RestrictedRegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"Phonebook_phonebook__A8MMG\",\"authSection\":\"Phonebook_authSection__5PUBC\"};"],"names":["_ref","text","_jsx","className","styles","type","children","urlAlphabet","name","pattern","title","inputId","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","nanoid","_jsxs","_Fragment","htmlFor","autoComplete","required","RegisterPage","dispatch","useDispatch","isLoading","useAuth","FallbackLoader","onSubmit","event","preventDefault","form","target","elements","value","trim","email","password","confirmPassword","register","reset","toast","InputField","AddContactBtn","RestrictedRegisterPage","isLoggedIn","Navigate","to"],"sourceRoot":""}